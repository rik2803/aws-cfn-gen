---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create ECS Cluster for managements tasks (Fargate) (aws-cfn-gen version: {{ gittag | default('na') }})


Resources:
  ECSClusterMgmt:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ecs-{{ project }}-mgmt"

  AwsLogsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: awslogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents', 'logs:DescribeLogStreams' ]
                Resource: '*'
        - PolicyName: ecrpull
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: [ 'ecr:GetDownloadUrlForLayer', 'ecr:BatchGetImage', 'ecr:BatchCheckLayerAvailability', 'ecr:GetAuthorizationToken' ]
                Resource: '*'

  ECSEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [events.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole

  CWCreateDashboardTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/ReadOnlyAccessLocal"

  TaskCWCreateDashboard:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudWatchCWCreateDashboard
    Properties:
      Family: "task-cw-create-dashboard"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 1024
      Cpu: 512
      ContainerDefinitions:
        - Name: "cw-create-dashboard"
          Essential: "true"
          Image: "tryxcom/aws-cw-create-dashboard:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudWatchCWCreateDashboard"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "cw-create-dashboard"
          Environment:
            - Name: "ALARM_ACTION_ARN"
              Value: !ImportValue "{{ organization.cfn_name }}MonitoringSubaccount-MonitoringSNSTopic"
            - Name: "ALARM_EXCLUDE_LIST"
              Value: "{{ ecsmgmt.monitoring.adag_alarm_exclude_list | default('') }}"
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt CWCreateDashboardTaskRole.Arn

  CloudWatchDeleteAndCreateTaggedCloudformationStacks:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "cw-{{ project }}-delete-tagged-cfn-stacks"
      RetentionInDays: 14

{% if ecsmgmt.ass is defined and not (ecsmgmt.ass.disable | default(true)) %}
  AwsAssTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  DeleteAndCreateTaggedStacksTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  TaskAwsAssStop:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudWatchAwsAss
    Properties:
      Family: "task-aws-ass-stop"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 1024
      Cpu: 512
      ContainerDefinitions:
        - Name: "aws-ass-stop"
          Essential: "true"
          Image: "tryxcom/aws-ass-stop:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudWatchAwsAss"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "aws-ass-stop"
{%   if ecsmgmt.ass is defined and ecsmgmt.ass.tag_prefix is defined %}
          Environment:
            - Name: "ASS_TAG_PREFIX"
              Value: "{{ ecsmgmt.ass.tag_prefix }}"
{%   endif %}
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt AwsAssTaskRole.Arn

  TaskAwsAssStart:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudWatchAwsAss
    Properties:
      Family: "task-aws-ass-start"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 1024
      Cpu: 512
      ContainerDefinitions:
        - Name: "aws-ass-start"
          Essential: "true"
          Image: "tryxcom/aws-ass-start:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudWatchAwsAss"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "aws-ass-start"
{%   if ecsmgmt.ass is defined and ecsmgmt.ass.tag_prefix is defined %}
          Environment:
            - Name: "ASS_TAG_PREFIX"
              Value: "{{ ecsmgmt.ass.tag_prefix }}"
{%   endif %}
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt AwsAssTaskRole.Arn

  TaskDeleteTaggedCloudformationStacks:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudWatchDeleteAndCreateTaggedCloudformationStacks
    Properties:
      Family: "task-delete-tagged-cfn-stacks"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 1024
      Cpu: 512
      ContainerDefinitions:
        - Name: "delete-tagged-cfn-stacks"
          Essential: "true"
          Image: "tryxcom/aws-delete-tagged-cfn-stacks:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudWatchDeleteAndCreateTaggedCloudformationStacks"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "delete-tagged-cfn-stacks"
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt DeleteAndCreateTaggedStacksTaskRole.Arn

  TaskCreateTaggedCloudformationStacks:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudWatchDeleteAndCreateTaggedCloudformationStacks
    Properties:
      Family: "task-create-deleted-tagged-cfn-stacks"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 1024
      Cpu: 512
      ContainerDefinitions:
        - Name: "create-deleted-tagged-cfn-stacks"
          Essential: "true"
          Image: "tryxcom/aws-create-deleted-tagged-cfn-stacks:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CloudWatchDeleteAndCreateTaggedCloudformationStacks"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "create-deleted-tagged-cfn-stacks"
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt DeleteAndCreateTaggedStacksTaskRole.Arn

  CloudWatchAwsAss:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "cw-{{ project }}-aws-ass"
      RetentionInDays: 14

{%   if skip_user_creation is not defined or not skip_user_creation %}
  KeyDeleteAndCreateTaggedCloudformationStacksUser:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref DeleteAndCreateTaggedCloudformationStacksUser

  DeleteAndCreateTaggedCloudformationStacksUser:
    Type: AWS::IAM::User
    Properties:
      UserName: create-and-delete-tagged-cfn-stacks
      Policies:
        - PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
              {
                "Effect": "Allow",
                "Action": "ecs:RunTask",
                "Resource": [
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/task-delete-tagged-cfn-stacks",
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/task-create-deleted-tagged-cfn-stacks"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "iam:PassRole",
                "Resource": [
                  "${AwsLogsExecutionRole.Arn}",
                  "${DeleteAndCreateTaggedStacksTaskRole.Arn}"
                ]
              }
              ]
            }
          PolicyName: "ECSRunTask"

  ParameterStoreAccessKeyDeleteAndCreateStacksUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/DeleteAndCreateTaggedCloudformationStacksUser/accesskey"
      Type: String
      Value: !Ref KeyDeleteAndCreateTaggedCloudformationStacksUser
  ParameterStoreSecretKeyDeleteAndCreateStacksUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/DeleteAndCreateTaggedCloudformationStacksUser/secretkey"
      Type: String
      Value: !GetAtt KeyDeleteAndCreateTaggedCloudformationStacksUser.SecretAccessKey

  KeyAwsAssUser:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref AwsAssUser

  AwsAssUser:
    Type: AWS::IAM::User
    Properties:
      UserName: aws-ass
      Policies:
        - PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
              {
                "Effect": "Allow",
                "Action": "ecs:RunTask",
                "Resource": [
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/task-aws-ass-stop",
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/task-aws-ass-start"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "iam:PassRole",
                "Resource": [
                  "${AwsLogsExecutionRole.Arn}",
                  "${AwsAssTaskRole.Arn}"
                ]
              }
              ]
            }
          PolicyName: "ECSRunTask"

  ParameterStoreAccessKeyAwsAssUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/AwsAssUser/accesskey"
      Type: String
      Value: !Ref KeyAwsAssUser

  ParameterStoreSecretKeyAwsAssUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/AwsAssUser/secretkey"
      Type: String
      Value: !GetAtt KeyAwsAssUser.SecretAccessKey

{%   endif %}
{% endif %}

  CloudWatchCWCreateDashboard:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "cw-{{ project }}-cw-create-dashboard"
      RetentionInDays: 14

{% for scheduled_task in ecsmgmt.scheduled_tasks | default([]) %}
  EventRuleScheduledTask{{ scheduled_task.cfn_name }}:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for Scheduled Task for {{ scheduled_task.cfn_name }}"
      ScheduleExpression: "{{ scheduled_task.schedule_expression | default('rate(1 hour)') }}"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ECSClusterMgmt.Arn
          Id: "Target{{ scheduled_task.cfn_name }}"
          RoleArn: !GetAtt ECSEventsRole.Arn
          EcsParameters:
            LaunchType: "FARGATE"
            TaskCount: 1
            TaskDefinitionArn: !Ref {{ scheduled_task.task_definition_cfn_resource_name }}
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: "DISABLED"
                SecurityGroups:
                  - "{{ vpc_sg_app }}"
                Subnets:
                  - "{{ vpc_privatesubnet_az1 }}"
                  - "{{ vpc_privatesubnet_az2 }}"
{% endfor %}

{% for fargate_task in ecsmgmt.fargate_tasks | default([]) %}

  IAMAccessKey{{ fargate_task.cfn_name }}:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref IAMUser{{ fargate_task.cfn_name }}
{%       if iam_accesskey_serial is defined %}
      Serial: {{ iam_accesskey_serial }}
{%       endif %}

  IAMUser{{ fargate_task.cfn_name }}:
    Type: AWS::IAM::User
    Properties:
      UserName: {{ fargate_task.name }}
      Policies:
        - PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
              {
                "Effect": "Allow",
                "Action": "ecs:RunTask",
                "Resource": [
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/{{ fargate_task.name }}"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "iam:PassRole",
                "Resource": [
                  "${AwsLogsExecutionRole.Arn}",
                  "${TaskRole{{ fargate_task.cfn_name }}.Arn}"
                ]
              }
              ]
            }
          PolicyName: "ECSRunTask"

  ParameterStoreAccessKey{{ fargate_task.cfn_name }}:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/IAMUser{{ fargate_task.cfn_name }}/accesskey"
      Type: String
      Value: !Ref IAMAccessKey{{ fargate_task.cfn_name }}

  ParameterStoreSecretKey{{ fargate_task.cfn_name }}:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/{{ organization.cfn_name }}/aws-cfn-gen/ecsmgmt/IAMUser{{ fargate_task.cfn_name }}/secretkey"
      Type: String
      Value: !GetAtt IAMAccessKey{{ fargate_task.cfn_name }}.SecretAccessKey


  TaskRole{{ fargate_task.cfn_name }}:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
{%   for task_role_policy in fargate_task.task_role_policies %}
        - "{{ task_role_policy }}"
{%   endfor %}

  CWLogGroup{{ fargate_task.cfn_name }}:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "cw-{{ fargate_task.name }}"
      RetentionInDays: 14

  Task{{ fargate_task.cfn_name }}:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CWLogGroup{{ fargate_task.cfn_name }}
      - TaskRole{{ fargate_task.cfn_name }}
    Properties:
      Family: "{{ fargate_task.name }}"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: "{{ fargate_task.memory | default(1024) }}"
      Cpu: "{{ fargate_task.cpu | default(512) }}"
      ContainerDefinitions:
        - Name: "{{ fargate_task.name }}"
          Essential: "true"
          Image: "{{ fargate_task.image }}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref "CWLogGroup{{ fargate_task.cfn_name }}"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: "{{ fargate_task.name }}"
          Environment:
            - Name: "dummy"
              Value: "dummy"
{%   for env in fargate_task.environment | default([]) %}
            - Name: "{{ env.name }}"
              Value: "{{ env.value }}"
{%   endfor %}
      ExecutionRoleArn: !GetAtt AwsLogsExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole{{ fargate_task.cfn_name }}.Arn
{% endfor %}

Outputs:
  Dummy:
    Value: dummy
{% if skip_user_creation is not defined or not skip_user_creation %}
{%   if ecsmgmt.ass is defined and not (ecsmgmt.ass.disable | default(true)) %}
  AccessKeyParameterStoreNameDeleteAndCreateStacksUser:
    Value: !Ref ParameterStoreAccessKeyDeleteAndCreateStacksUser
  SecretKeyParameterStoreNameDeleteAndCreateStacksUser:
    Value: !Ref ParameterStoreSecretKeyDeleteAndCreateStacksUser
  AccessKeyParameterStoreNameAwsAssUser:
    Value: !Ref ParameterStoreAccessKeyAwsAssUser
  SecretKeyParameterStoreNameAwsAssUser:
    Value: !Ref ParameterStoreSecretKeyAwsAssUser
{%   endif %}
{% endif %}
{% for fargate_task in ecsmgmt.fargate_tasks | default([]) %}
  AccessKeyParameterStoreName{{ fargate_task.cfn_name }}:
    Value: !Ref ParameterStoreAccessKey{{ fargate_task.cfn_name }}
  SecretKeyParameterStoreName{{ fargate_task.cfn_name }}:
    Value: !Ref ParameterStoreSecretKey{{ fargate_task.cfn_name }}
{% endfor %}
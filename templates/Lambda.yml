---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create Lambda functions (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:


### Create the Lambda functions and execution roles
{% for lambda in lambda_functions | default([]) %}
{#   Create some variables #}
{%   set lambda_cfn_name = lambda.name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}
{%   set lambda_fn_name = (lambda.name.split('_'))[0] %}

## TODO ##  LambdaExecutionRole{{ lambda_cfn_name }}:
## Automatically create Execution Roles for the Lambda function granting
## access to the resources the function will be addressing
#                       execution_role_permissions:
#                         - type: sns
#                           export: LarsAccSNS-LarsEvents
#                           actions:
#                             - sns:publish

  {{ lambda_cfn_name }}:
    Type: AWS::Lambda::Function
    Properties:
{%   if lambda.function_name is defined %}
      FunctionName: {{ lambda.function_name }}
{%   endif %}
{%   if lambda.handler_override is defined %}
      Handler: "{{ lambda.handler_override }}"
{%   else %}
{%     if 'java' in lambda.runtime %}
      Handler: "{{ lambda_fn_name }}.{{ lambda.class_name | default('Handler') }}::{{ lambda.handler }}"
{%     elif 'go' in lambda.runtime %}
      Handler: "{{ lambda.handler }}"
{%     else %}
      Handler: "{{ lambda_fn_name }}.{{ lambda.handler }}"
{%     endif %}
{%   endif %}
{%   if lambda.role is not defined %}
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LambdaBasicExecutionRole"
{%   else %}
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/{{ lambda.role }}"
{%   endif %}
{%   if lambda.environment is defined %}
      Environment:
        Variables:
{%     for env in lambda.environment %}
{%       if env.value_from_import is defined %}
         {{ env.name }}: !ImportValue "{{ env.value_from_import }}"
{%       else %}
         {{ env.name }}: "{{ env.value }}"
{%       endif %}
{%     endfor %}
{%   endif %}
      Code:
        S3Bucket: "{{ lambda.code.s3_bucket }}"
        S3Key: "{{ lambda.code.s3_key }}"
      Runtime: {{ lambda.runtime | default('python3.12') }}
{%   if lambda.vpc is defined and lambda.vpc %}
      VpcConfig:
        SubnetIds:
          - "{{ vpc_privatesubnet_az1 }}"
          - "{{ vpc_privatesubnet_az2 }}"
{%     if vpc_nr_of_azs == 3 %}
          - "{{ vpc_privatesubnet_az3 }}"
{%     endif %}
        SecurityGroupIds:
          - "{{ vpc_sg_app }}"
{%   endif %}
{%   if lambda.filesystems is defined %}
      FileSystemConfigs:
{%     for filesystem in lambda.filesystems %}
        - Arn: !ImportValue {{ app_and_env_cfn }}EFS{{ filesystem.accesspoint_cfn_name }}
          LocalMountPath: {{ filesystem.mountpath }}
{%     endfor %}
{%   endif %}
      Timeout: "{{ lambda.timeout | default('30') }}"
      MemorySize: "{{ lambda.memory_size | default('256') }}"
      Tags:
        - Key: Application
          Value: "{{ application }}"
        - Key: Environment
          Value: "{{ env }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"

{%   for liv in lambda.invoke_permissions | default([]) %}
{%     if liv.type == 'predefined' and liv.name == 'logs' %}
  {{ lambda_cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ lambda_cfn_name }}
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
{%     elif liv.type == 'predefined' and liv.name == 's3' %}
  {{ lambda_cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ lambda_cfn_name }}
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: "{{ liv.bucket_arn }}"
{%     elif liv.type == 'predefined' and liv.name == 'events' %}
  {{ lambda_cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ lambda_cfn_name }}
      Principal: "events.amazonaws.com"
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:{{ liv.event_basename }}"
{%     elif liv.type == 'service' %}
  {{ lambda_cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ lambda_cfn_name }}
      Principal: "{{ liv.principal }}"
      SourceArn: "{{ liv.source_arn }}"
{%     elif liv.type == 'account' %}
  {{ lambda_cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ lambda_cfn_name }}
      Principal: "{{ liv.principal }}"
{%     endif %}

{%   endfor %}

{%   for sns_subscr in lambda.sns_subscriptions | default([]) %}
{%     set sns_subscr_cfn_name = sns_subscr.name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}
  {{ sns_subscr_cfn_name }}SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt {{ lambda_cfn_name }}.Arn
      Protocol: "lambda"
      Region: "{{ sns_subscr.region | default(target_account.region) | default('eu-central-1') }}"
      TopicArn: "{{ sns_subscr.topic_arn }}"
{%     if sns_subscr.filter_policy is defined %}
      FilterPolicy: '{{ sns_subscr.filter_policy | to_json }}'
{%     endif %}
{%   endfor %}
{% endfor %}

Outputs:
{% for lambda in lambda_functions | default([]) %}
{#   Create some variables #}
{%   set lambda_cfn_name = lambda.name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}

  {{ lambda_cfn_name }}Output:
    Value: !Ref {{ lambda_cfn_name }}
    Description: "Lambda function {{ lambda_cfn_name }} resource logical name"
    Export:
      Name: !Sub "${AWS::StackName}-{{ lambda_cfn_name }}"

  {{ lambda_cfn_name }}ArnOutput:
    Value: !GetAtt {{ lambda_cfn_name }}.Arn
    Description: "Lambda function {{ lambda_cfn_name }} Arn"
    Export:
      Name: !Sub "${AWS::StackName}-{{ lambda_cfn_name }}Arn"

{% endfor %}

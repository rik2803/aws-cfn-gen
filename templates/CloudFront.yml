{# Create a list of origin buckets to be used in the deploy user creation #}
{% set s3_origin_list = [] %}
{% for cloudfront in cloudfront_distributions %}
{%   if cloudfront.origins_and_cachebehaviors is defined %}
{%     for origin in cloudfront.origins_and_cachebehaviors %}
{#       Also take explicit bucket naming into account with domain.name and domain.type #}
{%       if origin.domain is defined %}
{%         if origin.domain.type == 's3' %}
{#           No need for bucket access if domain.type is not s3 #}
{%           set _ = s3_origin_list.append("arn:aws:s3:::" + origin.domain.name + "/*") %}
{%         endif %}
{%       else %}
{%           set _ = s3_origin_list.append("arn:aws:s3:::" + origin.origin_name + "/*") %}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create CloudFront distributions (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:

  DeployUser:
    Type: AWS::IAM::User
    Properties:
      UserName: "deploy-{{ project }}"
      Path: "/"
      Policies:
{% if s3_origin_list|length > 0 %}
        - PolicyName: AllowAccessToBuckets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectACL
                Resource:
{%   for s3 in s3_origin_list %}
                  - "{{ s3 }}"
{%   endfor %}
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource:
                  - "*"
{% endif %}
        - PolicyName: AllowInvalidationAccessToCloudFrontDistribution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "acm:ListCertificates"
                  - "cloudfront:GetDistribution"
                  - "cloudfront:GetDistributionConfig"
                  - "cloudfront:ListDistributions"
                  - "cloudfront:ListCloudFrontOriginAccessIdentities"
                  - "cloudfront:CreateInvalidation"
                  - "cloudfront:GetInvalidation"
                  - "cloudfront:ListInvalidations"
                  - "elasticloadbalancing:DescribeLoadBalancers"
                  - "iam:ListServerCertificates"
                  - "sns:ListSubscriptionsByTopic"
                  - "sns:ListTopics"
                  - "waf:GetWebACL"
                  - "waf:ListWebACLs"
                Resource:
                  - "*"

  DeployAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref DeployUser

{% for cloudfront in cloudfront_distributions %}
{%   for cname in cloudfront.cnames %}
{%     set r53_cfn_suffix = cname | replace('.', ' ') | replace('-', ' ') | replace('_', ' ') | title | replace(' ', '') %}
{%     set cname_domain = (cname.split('.'))[-2:] | join('.') %}
{%     if route53 is defined and route53.public_hosted_zones is defined %}
{%       for public_hosted_zone in route53.public_hosted_zones %}
{%         if public_hosted_zone.name == cname_domain %}
  R53{{ r53_cfn_suffix }}:
    Type: Custom::CNAME
    DependsOn:
      - CloudFrontDistribution{{ cloudfront.cfn_name }}
    Properties:
      ServiceToken: {{ public_hosted_zone.sns_arn }}
      Source: {{ cname }}.
      Target: !GetAtt CloudFrontDistribution{{ cloudfront.cfn_name }}.DomainName
      RecordType: "A"
      Alias: "Yes"
{#    AliasHostedZoneId is always the same for CloudFront distribution domains #}
      AliasHostedZoneId: "Z2FDTNDATAQYW2"
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endfor %}

{%   for origin in cloudfront.origins_and_cachebehaviors %}
{%     if origin.domain is not defined or origin.domain.type == 's3' %}
  S3{{ origin.origin_name | replace('-', ' ') | title | replace(' ', '') }}:
{%       if cloudfront.logging is defined %}
    DependsOn:
      - S3{{ cfn_project }}{{ cloudfront.cfn_name }}Logs
{%       endif %}
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
{%       if origin.domain is defined and origin.domain.type == 's3' %}
      BucketName: "{{ origin.domain.name }}"
{%       else %}
      BucketName: "{{ origin.origin_name }}"
{%       endif %}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 60
            Status: Enabled
{%       if origin.origin_cors_rules is defined %}
      CorsConfiguration:
        CorsRules:
          -
{%         if origin.origin_cors_rules.allowed_headers is defined %}
            AllowedHeaders: {{ origin.origin_cors_rules.allowed_headers | to_yaml }}
{%         endif %}
{%         if origin.origin_cors_rules.allowed_methods is defined %}
            AllowedMethods: {{ origin.origin_cors_rules.allowed_methods | to_yaml }}
{%         endif %}
{%         if origin.origin_cors_rules.allowed_origins is defined %}
            AllowedOrigins: {{ origin.origin_cors_rules.allowed_origins | to_yaml }}
{%         endif %}
{%         if origin.origin_cors_rules.exposed_headers is defined %}
            ExposedHeaders: {{ origin.origin_cors_rules.exposed_headers | to_yaml }}
{%         endif %}
{%         if origin.origin_cors_rules.max_age is defined %}
            MaxAge: {{ origin.origin_cors_rules.max_age }}
{%         endif %}
{%       endif %}
{%       if cloudfront.logging is defined %}
      LoggingConfiguration:
        DestinationBucketName: "{{ project }}-{{ cloudfront.name }}-logs"
        LogFilePrefix: s3-{{ cloudfront.logging.prefix | default('') }}
{%       endif %}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
{%       if origin.origin_bucket_redirects is defined %}
        RoutingRules:
{%         for redirect in origin.origin_bucket_redirects %}
          - RedirectRule:
              HostName: "{{ redirect.redirect_rule.hostname }}"
              HttpRedirectCode: "{{ redirect.redirect_rule.http_redirect_code | default('301') }}"
              Protocol: "{{ redirect.redirect_rule.protocol | default('https') }}"
              ReplaceKeyWith: "{{ redirect.redirect_rule.replace_key_with | default('') }}"
            RoutingRuleCondition:
{%           if redirect.routing_rule_condition.type == 'http_error_code_returned_equals' %}
              HttpErrorCodeReturnedEquals: "{{ redirect.routing_rule_condition.value | default('404') }}"
{%           endif%}
{%         endfor %}
{%       endif %}
      Tags:
        - Key: Application
          Value: "{{ application }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"
        - Key: Environment
          Value: "{{ env }}"
{%     endif %}
{%   endfor %}
{% endfor %}

{% for cloudfront in cloudfront_distributions %}
  S3{{ cfn_project }}{{ cloudfront.name | replace('-', ' ') | title | replace(' ', '') }}DefaultCloudfrontOrigin:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "{{ project }}-{{ cloudfront.name }}-default-cloudfront-origin"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      LifecycleConfiguration:
        Rules:
          -
            NoncurrentVersionExpirationInDays: 60
            Status: Enabled

      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: errror.html

{%   if cloudfront.logging is defined %}
  S3{{ cfn_project }}{{ cloudfront.cfn_name }}Logs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: {{ project }}-{{ cloudfront.name }}-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
      AccessControl: "LogDeliveryWrite"
      Tags:
        - Key: "ass:s3:clean-bucket-on-stop"
          Value: "yes"

        {%   endif %}

  CloudFrontDistribution{{ cloudfront.cfn_name }}:
    DependsOn:
      - S3{{ cfn_project }}{{ cloudfront.name | replace('-', ' ') | title | replace(' ', '') }}DefaultCloudfrontOrigin
{%   if cloudfront.logging is defined %}
      - S3{{ cfn_project }}{{ cloudfront.cfn_name }}Logs
{%   endif %}
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
{%   for cname in cloudfront.cnames %}
          - "{{ cname }}"
{%   endfor %}
        Comment: "CloudFront distribution for {{ application }}"
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: "{{ cloudfront.default_root_object | default('index.html') }}"
{%   if cloudfront.custom_error_responses is defined %}
        CustomErrorResponses:
{%     for err in cloudfront.custom_error_responses %}
          - ErrorCachingMinTTL: {{ err.error_caching_min_ttl | default('300') }}
            ErrorCode: {{ err.error_code | default('404') }}
            ResponseCode:  {{ err.reponse_code | default('200') }}
            ResponsePagePath:  {{ err.response_page_path | default('/index.html') }}
{%     endfor %}
{%   endif %}
        CacheBehaviors:
{%   for origin in cloudfront.origins_and_cachebehaviors | sort(attribute='priority') %}
          - ForwardedValues:
              QueryString: true
{%     if origin.forward_cookies is defined %}
              Cookies:
                Forward: {{ origin.forward_cookies.forward | default('all') }}
{%       if origin.forward_cookies.whitelisted_names is defined and origin.forward_cookies.forward == 'whitelist' %}
                WhitelistedNames:
{%         for wl in origin.forward_cookies.whitelisted_names %}
                  - {{ wl }}
{%         endfor %}
{%       endif %}
{%     endif %}
{%     if origin.forward_headers is defined %}
              Headers:
{%       for header in origin.forward_headers %}
{%         if header == 'asterisk' %}
                - '*'
{%         else %}
                - {{ header }}
{%         endif %}
{%       endfor %}
{%     endif %}
{%     if origin.lambda_function_associations is defined %}
            LambdaFunctionAssociations:
{%       for lfa in origin.lambda_function_associations %}
              - EventType: "{{ lfa.event_type }}"
                LambdaFunctionARN: !Sub
                  - ${LambdaArn}:${LambdaVersion}
                  - { LambdaArn: "{{ lfa.lambda_function_arn }}", LambdaVersion: "{{ lfa.lambda_function_version }}" }
{%       endfor %}
{%     endif %}
{%     if origin.allowed_http_methods is defined and origin.allowed_http_methods == 'options' %}
            AllowedMethods: ["GET", "HEAD", "OPTIONS"]
{%     endif %}
{%     if origin.allowed_http_methods is defined and origin.allowed_http_methods == 'all' %}
            AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
{%     endif %}
            TargetOriginId: "{{ origin.origin_name }}-origin"
            PathPattern: "{{ origin.path_pattern | default('/*') }}"
            ViewerProtocolPolicy: "{{ origin.viewer_protocol_policy | default('redirect-to-https') }}"
{%     if origin.min_ttl is defined %}
            MinTTL: {{ origin.min_ttl }}
{%     endif %}
{%     if origin.max_ttl is defined %}
            MaxTTL: {{ origin.max_ttl }}
{%     endif %}
{%     if origin.default_ttl is defined %}
            DefaultTTL: {{ origin.default_ttl }}
{%     endif %}
{%   endfor %}

        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: "{{ project }}-{{ cloudfront.name }}-default-cloudfront-origin"
          ViewerProtocolPolicy: allow-all

{%   if cloudfront.logging is defined %}
        Logging:
          Bucket: "{{ project }}-{{ cloudfront.name }}-logs.s3.amazonaws.com"
          Prefix: "cloudfront-{{ cloudfront.logging.prefix | default('') }}"
          IncludeCookies: "{{ cloudfront.logging.includecookies | default('false') }}"
{%   endif %}
        Origins:
          - Id: "{{ project }}-{{ cloudfront.name }}-default-cloudfront-origin"
            DomainName: "{{ project }}-{{ cloudfront.name }}-default-cloudfront-origin.s3-website.{{ target_account.region }}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only

{%   for origin in cloudfront.origins_and_cachebehaviors %}
          - Id: "{{ origin.origin_name }}-origin"
{%     if origin.domain is defined %}
{%       if origin.domain.type == 'import' %}
            DomainName: !ImportValue "{{ origin.domain.name }}"
{%       endif %}
{%       if origin.domain.type == 's3' %}
            DomainName: "{{ origin.domain.name }}.s3-website.{{ target_account.region }}.amazonaws.com"
{%       endif %}
{%       if origin.domain.type == 'custom' %}
            DomainName: "{{ origin.domain.origin_domain_name }}"
{%       endif %}
{%       if origin.domain.origin_path is defined %}
            OriginPath: "{{ origin.domain.origin_path }}"
{%       endif %}
{%     else %}
            DomainName: "{{ origin.origin_name }}.s3-website.{{ target_account.region }}.amazonaws.com"
{%     endif %}
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: {{ origin.protocol_policy | default('http-only') }}
              OriginSSLProtocols: 
                - {{ origin.origin_ssl_protocols | default('TLSv1.2') }}
{%    if origin.origin_custom_headers is defined %}
            OriginCustomHeaders:
{%      for header in origin.origin_custom_headers %}
              - HeaderName: "{{ header.name }}"
                HeaderValue: "{{ header.value }}"
{%      endfor %}
{%    endif %} 
{%   endfor %}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: "{{ cloudfront.certificate_arn }}"
          SslSupportMethod: sni-only
          MinimumProtocolVersion: "{{ cloudfront.minimum_protocol_version | default('TLSv1') }}"

      Tags:
        - Key: Application
          Value: {{ application | default('NA') }}
        - Key: Environment
          Value: {{ env | default('NA') }}
        - Key: Customer
          Value: {{ customer | default('NA') }}

{% endfor %}

Outputs:
  AccessKeyDeployUser:
    Value:
      !Ref DeployAccessKey
  SecretKeyDeployUser:
    Value: !GetAtt DeployAccessKey.SecretAccessKey
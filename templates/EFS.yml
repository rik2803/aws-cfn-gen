AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Create one or more EFS filesystems (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:
{% for filesystem in efs %}
  {{ filesystem.cfn_name }}:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Application
          Value: "{{ application }}"
        - Key: Environment
          Value: "{{ env }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"
{%   if filesystem.lifecycle_policies is defined %}
      LifecyclePolicies:
{%     for lifecycle_policy in filesystem.lifecycle_policies %}
        - TransitionToIA: "{{ lifecycle_policy.transition_to_ia | default('AFTER_7_DAYS') }}"
{%       if lifecycle_policy.transition_to_primary_storage_class is defined %}
          TransitionToPrimaryStorageClass: "{{ lifecycle_policy.transition_to_primary_storage_class }}"
{%       endif %}
{%     endfor %}
{%   endif %}

  {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref {{ filesystem.cfn_name }}
      SecurityGroups:
        - "{{ vpc_sg_app }}"
      SubnetId: "{{ vpc_privatesubnet_az1 }}"

  {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref {{ filesystem.cfn_name }}
      SecurityGroups:
        - "{{ vpc_sg_app }}"
      SubnetId: "{{ vpc_privatesubnet_az2 }}"

{%   if vpc_nr_of_azs == "3" %}
  {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref {{ filesystem.cfn_name }}
      SecurityGroups:
        - "{{ vpc_sg_app }}"
      SubnetId: "{{ vpc_privatesubnet_az3 }}"
{%   endif %}

{%   if filesystem.s3_to_efs_copy is defined %}

  {{ filesystem.cfn_name }}AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref {{ filesystem.cfn_name }}
      PosixUser:
        Uid: "0"
        Gid: "0"
{%   endif %}

{%   for accesspoint in filesystem.accesspoints | default([]) %}

  {{ accesspoint.cfn_name }}:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref {{ filesystem.cfn_name }}
{%     if accesspoint.posix_user is defined %}
      PosixUser:
        Uid: "{{ accesspoint.posix_user.uid | default('0') }}"
        Gid: "{{ accesspoint.posix_user.gid | default('0') }}"
{%       if accesspoint.posix_user.secondary_gids is defined %}
        SecondaryGids:
{%         for gid in accesspoint.posix_user.secondary_gids %}
          - "{{ gid }}"
{%         endfor %}
{%       endif %}
{%     endif %}
      RootDirectory:
        Path: {{ accesspoint.path | default('/') }}
{%     if accesspoint.creation_info is defined %}
        CreationInfo:
          OwnerGid: "{{ accesspoint.creation_info.owner_gid | default('0') }}"
          OwnerUid: "{{ accesspoint.creation_info.owner_uid | default('0') }}"
          Permissions: "{{ accesspoint.creation_info.permissions | default('0755') }}"
{%     endif %}

{%   endfor %}

{%  if filesystem.s3_to_efs_copy is defined %}
# Lambda to EFS copy
  S3ToEfsBucket{{ filesystem.cfn_name }}:
    Type: AWS::S3::Bucket
    DependsOn:
      - AwsLambdaS3ToEfsCopy{{ filesystem.cfn_name }}InvokePermission
    Properties:
      AccessControl: "Private"
      BucketName: !Sub "{{ application }}-{{ env }}-efs-${ {{ filesystem.cfn_name }} }"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: "true"
        BlockPublicPolicy: "true"
        IgnorePublicAcls: "true"
        RestrictPublicBuckets: "true"
      LifecycleConfiguration:
        Rules:
        - NoncurrentVersionExpirationInDays: 1
          ExpirationInDays: 29
          Status: Enabled
        - ExpiredObjectDeleteMarker: true
          AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1
          Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AwsLambdaS3ToEfsCopy{{ filesystem.cfn_name }}.Arn
      Tags:
        - Key: Application
          Value: "{{ application }}"
        - Key: Environment
          Value: "{{ env }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"

  AwsLambdaS3ToEfsCopy{{ filesystem.cfn_name }}:
    Type: AWS::Lambda::Function
    DependsOn:
      - {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ1
      - {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ2
      - {{ filesystem.cfn_name }}MountTargetPrivateSubnetAZ3
    Properties:
      Handler: "aws-lambda-s3-trigger-to-efs.lambda_handler"
      Role: !GetAtt LambdaEfsRole{{ filesystem.cfn_name }}.Arn
      Code:
        S3Bucket: "{{ lambda_function_bucket_name }}"
        S3Key: "{{ filesystem.s3_to_efs_copy.lambda_key }}"
      Runtime: python3.12
      Environment:
        Variables:
          PROJECT: "{{ application }}"
          ENVIRONMENT: "{{ env }}"
          FILESYSTEM: "{{ filesystem.cfn_name }}"
      VpcConfig:
        SubnetIds:
        - "{{ vpc_privatesubnet_az1 }}"
        - "{{ vpc_privatesubnet_az2 }}"
{%       if vpc_nr_of_azs == 3 %}
        - "{{ vpc_privatesubnet_az3 }}"
{%      endif %}
        SecurityGroupIds:
        - "{{ vpc_sg_app }}"
      FileSystemConfigs:
      - Arn: !GetAtt {{ filesystem.cfn_name }}AccessPoint.Arn
        LocalMountPath: "/mnt/efs"
      Timeout: "900"
      MemorySize: "{{ lambda.memory_size | default('256') }}"
      Tags:
        - Key: Application
          Value: "{{ application }}"
        - Key: Environment
          Value: "{{ env }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"

  AwsLambdaS3ToEfsCopy{{ filesystem.cfn_name }}InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsLambdaS3ToEfsCopy{{ filesystem.cfn_name }}
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::{{ application }}-{{ env }}-efs-${ {{ filesystem.cfn_name }} }"

  LambdaEfsRole{{ filesystem.cfn_name }}:
    Type: AWS::IAM::Role
    DependsOn:
      - LambdaEfsPolicy{{ filesystem.cfn_name }}
    Properties:
      RoleName: LambdaEfsRole{{ filesystem.cfn_name }}
      AssumeRolePolicyDocument:
        { "Version": "2012-10-17", "Statement": [ { "Sid": "", "Effect": "Allow", "Principal": { "Service": "lambda.amazonaws.com" }, "Action": "sts:AssumeRole" } ] }
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/LambdaEfsPolicy{{ filesystem.cfn_name }}'

  LambdaEfsPolicy{{ filesystem.cfn_name }}:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: LambdaEfsPolicy{{ filesystem.cfn_name }}
      Description: "Managed policy LambdaEfsPolicyAwsCfnGen for {{ cfn_project }}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:ListBucket'
              - 's3:ListObjectsV2'
              - 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::{{ application }}-{{ env }}-efs-${ {{ filesystem.cfn_name }} }*"
              - !Sub "arn:aws:s3:::{{ application }}-{{ env }}-efs-${ {{ filesystem.cfn_name }} }*/*"
            Effect: Allow
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
            Resource: '*'
            Effect: Allow
          - Action:
              - 'elasticfilesystem:ClientMount'
              - 'elasticfilesystem:ClientWrite'
            Resource:
              - !Sub "arn:aws:elasticfilesystem:eu-central-1:455872502123:file-system/${ {{ filesystem.cfn_name }}}"
            Effect: Allow
          - Action:
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeInstances'
              - 'ec2:AttachNetworkInterface'
            Resource: '*'
            Effect: Allow

  SSMParameterS3ToEfsCopy{{ filesystem.cfn_name }}:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "S3ToEfsBucket{{ filesystem.cfn_name }}"
      Type: "String"
      Value: !Ref "S3ToEfsBucket{{ filesystem.cfn_name }}"
      Description: "SSM Parameter S3 bucket used for deploy to {{ filesystem.cfn_name }}."

{%  endif %}

{% endfor %}

Outputs:
{% for filesystem in efs %}
  {{ filesystem.cfn_name }}Output:
    Value: !Ref {{ filesystem.cfn_name }}
    Description: "EFS File System ID"
    Export:
      Name: !Sub "${AWS::StackName}{{ filesystem.cfn_name }}"
{%  for accesspoint in filesystem.accesspoints | default([]) %}
  {{ accesspoint.cfn_name }}Output:
     Value: !GetAtt {{ accesspoint.cfn_name }}.Arn
     Description: "EFS File System Access Point ARN"
     Export:
       Name: !Sub "${AWS::StackName}{{ accesspoint.cfn_name }}"
{%  endfor %}
{% endfor %}

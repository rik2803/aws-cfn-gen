---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Create S3 buckets for project {{ project }} (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:
{% for bucket in s3 %}
  {{ cfn_project }}{{ bucket.cfn_name }}:
    Type: AWS::S3::Bucket
    Properties:
{%   if bucket.access_control is defined and bucket.access_control in [ "AuthenticatedRead", "AwsExecRead", "BucketOwnerRead", "BucketOwnerFullControl", "LogDeliveryWrite", "Private", "PublicRead", "PublicReadWrite" ] %}
      AccessControl: {{ bucket.access_control }}
{%   else %}
      AccessControl: Private
{%   endif %}
      BucketName: "{{ application }}-{{ env }}-{{ bucket.name }}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
{%   if bucket.versioning is defined %}
        Status: {{ bucket.versioning | lower | title }}
{%   else %}
        Status: Enabled
{%   endif %}
{%   if bucket.public_access_block_configuration is defined %}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: {{ bucket.public_access_block_configuration.block_public_acls | default("true") }}
        BlockPublicPolicy: {{ bucket.public_access_block_configuration.block_public_policy | default("true") }}
        IgnorePublicAcls: {{ bucket.public_access_block_configuration.ignore_public_acls | default("true") }}
        RestrictPublicBuckets: {{ bucket.public_access_block_configuration.restrict_public_buckets | default("true") }}

{%   endif %}
{%   if bucket.cors is defined %}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: {{ (bucket.cors.allowed_headers | default(['*'])) | to_yaml }}
            AllowedMethods: {{ (bucket.cors.allowed_methods | default(['GET', 'PUT'])) | to_yaml }}
            AllowedOrigins: {{ (bucket.cors.allowed_origins | default(['*'])) | to_yaml }}
{%     if bucket.cors.exposed_headers is defined %}
            ExposedHeaders: {{ bucket.cors.exposed_headers | to_yaml }}
{%     endif %}
{%   endif %}
      LifecycleConfiguration:
{%   if bucket.lifecycle_configuration is not defined %}
        Rules:
          - NoncurrentVersionExpirationInDays: 60
            Status: Enabled
{%   else %}
{%     for line in bucket.lifecycle_configuration.split('\n') %}
        {{ line }}
{%     endfor %}
{%   endif %}
{%   if bucket.static_website_hosting is defined and ( bucket.static_website_hosting or bucket.static_website_hosting in [ "yes", "Yes", "true", "True", "on", "On" ] ) %}
      WebsiteConfiguration:
        IndexDocument: {{ bucket.indexdocument | default('index.html') }}
        ErrorDocument: {{ bucket.errordocument | default('index.html') }}
{%   endif %}
{%   if bucket.send_create_events_to_lambda_import is defined %}
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !ImportValue {{ bucket.send_create_events_to_lambda_import }}
{%   endif %}
      Tags:
      - Key: Application
        Value: "{{ application }}"
      - Key: Environment
        Value: "{{ env }}"
      - Key: Customer
        Value: "{{ customer | default('NA') }}"
{%  for tag in bucket.tags | default([]) %}
{%    if tag.key is defined and tag.value is defined %}
      - Key: "{{ tag.key }}"
        Value: "{{ tag.value }}"
{%    endif %}
{%  endfor %}

{% endfor %}

{% if s3_policies is defined %}
{%   for policy in s3_policies %}
{# It's not very useful to create a BucketPolicy without a policy document #}
{%     if policy.policy_document is defined %}
  {{ cfn_project }}{{ policy.cfn_name }}:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - {{ cfn_project }}{{ policy.bucket_cfn_name }}
    Properties:
      Bucket: !Ref {{ cfn_project }}{{ policy.bucket_cfn_name }}
      PolicyDocument:
        {{ policy.policy_document | to_json }}
{%     endif %}
{%   endfor %}
{% endif %}

{% set s3_output_list = [] %}
{% for bucket in s3 %}
{%   if bucket.skip_output is defined and not bucket.skip_output  %}
{%     set _ = s3_output_list.append({'cfn_name': bucket.cfn_name, 'name': bucket.name}) %}
{%   endif %}
{% endfor %}

{% if s3_output_list | length > 0 %}
Outputs:
{%   for bucket in s3_output_list %}
  {{ cfn_project }}{{ bucket.cfn_name }}:
    Value: !Ref {{ cfn_project }}{{ bucket.cfn_name }}
    Description: "S3 bucket {{ bucket.cfn_name }}"
    Export:
      Name: !Sub "${AWS::StackName}-{{ bucket.cfn_name }}"

  {{ cfn_project }}{{ bucket.cfn_name }}WebsiteURL:
    Value: !GetAtt {{ cfn_project }}{{ bucket.cfn_name }}.WebsiteURL
    Description: "S3 bucket {{ bucket.cfn_name }} website URL"
    Export:
      Name: !Sub "${AWS::StackName}-{{ bucket.cfn_name }}-WebsiteURL"

  {{ cfn_project }}{{ bucket.cfn_name }}WebsiteDomain:
    Value: "{{ application }}-{{ env }}-{{ bucket.name }}.s3-website.{{ target_account.region }}.amazonaws.com"
    Description: "S3 bucket {{ bucket.cfn_name }} website domain"
    Export:
      Name: !Sub "${AWS::StackName}-{{ bucket.cfn_name }}-WebsiteDomain"

  {{ cfn_project }}{{ bucket.cfn_name }}DomainName:
    Value: "{{ application }}-{{ env }}-{{ bucket.name }}.s3.{{ target_account.region }}.amazonaws.com"
    Description: "S3 bucket {{ bucket.cfn_name }} IPv4 API domain name"
    Export:
      Name: !Sub "${AWS::StackName}-{{ bucket.cfn_name }}-ApiDomainName"

{%   endfor %}
{% endif %}
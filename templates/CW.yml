AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Create CloudWatch related resources (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:

  ### IAM Managed Policy and Role for the Lambda function that creates
  ### log group subscription and sets log stream retention
  CWLogGroupSubscriptionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CWLogGroupSubscriptions
      Description: "Managed policy CWLogGroupSubscriptions for LarsTst"
      PolicyDocument:
        Fn::Sub: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              { "Sid": "AllowCWLogGroupSubscriptions",
                "Effect": "Allow",
                "Action": [
                  "logs:DescribeLogGroups",
                  "logs:putSubscriptionFilter",
                  "logs:PutRetentionPolicy"
                ],
                "Resource": ["arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"]
              }
            ]
          }

  LambdaCWLogsSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaCWLogsSubscriptionRole
      AssumeRolePolicyDocument: >-
        {
          "Version": "2012-10-17",
          "Statement": [
            { "Sid": "",
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "aws:SourceAccount": "{{ target_account.account_id }}"
                }
              }
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CWLogGroupSubscriptionsPolicy

{% if cw.auto_config_log_group_lambda_s3_key is defined %}
  ### Lambda function to ship CW Logs to whatever destination
  AwsLambdaCWLogsSubscription:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "cw-logs-new-stream-to-lambda.lambda_handler"
      Role: !GetAtt LambdaCWLogsSubscriptionRole.Arn
      Environment:
        Variables:
{%   if cw.logshipper_lambda_function_arn_import is defined %}
          LAMBDA_FUNCTION_ARN: !ImportValue "{{ cw.logshipper_lambda_function_arn_import }}"
{%   elif cw.logshipper_lambda_function_arn is defined %}
          LAMBDA_FUNCTION_ARN: "{{ cw.logshipper_lambda_function_arn }}"
{%   endif %}
{%   if env|lower == "prd" %}
          RETENTION_IN_DAYS: "{{ (cw.log_group_settings | default({})).retention_in_days | default('180') }}"
{%   else %}
          RETENTION_IN_DAYS: "{{ (cw.log_group_settings | default({})).retention_in_days | default('14') }}"
{%   endif %}
          FILTER_PATTERN: "{{ (cw.log_group_settings | default({})).filter_pattern | default('-DEBUG') }}"
{%   if cw.auto_config_log_group_lambda_exclusion_substring is defined %}
          LOGGROUP_EXCLUSION_SUBSTRINGS: "{{ cw.auto_config_log_group_lambda_exclusion_substring }}"
{%   endif %}
      Code:
        S3Bucket: "{{ lambda_function_bucket_name }}"
        S3Key: "{{ cw.auto_config_log_group_lambda_s3_key }}"
      Runtime: python3.12
      Tags:
        - Key: Application
          Value: "{{ application | default('NA') }}"
        - Key: Environment
          Value: "{{ env  | default('NA') }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"

  AwsLambdaCWLogsSubscriptionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AwsLambdaCWLogsSubscription.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CWEventRuleCWCreateLogGroup.Arn

  ### CW Event Rule to send CW CreateLogGroup events to a Lambda function
  CWEventRuleCWCreateLogGroup:
    Type: AWS::Events::Rule
    Properties:
      Description: "Emit event whenever a CreateLogGroup API call is made"
      EventPattern: '{ "source": [ "aws.logs" ], "detail-type": [ "AWS API Call via CloudTrail" ], "detail": { "eventSource": [ "logs.amazonaws.com" ], "eventName": [ "CreateLogGroup" ] } }'
      Name: CWCreateLogGroup
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt AwsLambdaCWLogsSubscription.Arn
          Id: AwsLambdaCWLogsSubscription
{% endif %}

  SSMParameterCWAgent:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "AmazonCloudWatch-linux"
      Type: "String"
      Value: |
        {
        	"metrics": {
        		"append_dimensions": {
        			"ImageId": "${aws:ImageId}",
        			"InstanceId": "${aws:InstanceId}",
        			"InstanceType": "${aws:InstanceType}"
        		},
        		"metrics_collected": {
        			"disk": {
        				"measurement": [
        					"used_percent"
        				],
        				"metrics_collection_interval": 60,
        				"resources": [
        					"/"
        				]
        			},

        			"mem": {
        				"measurement": [
        					"mem_used_percent"
        				],
        				"metrics_collection_interval": 60
        			}
        		}
        	}
        }
      Description: "SSM Parameter for CWAgent installation configuration."

{% if cw.ec2_install_cwagent_lambda_s3_key is defined %}

  LambdaEC2InstallCWAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaEC2InstallCWAgentRole
      AssumeRolePolicyDocument: >-
        {
          "Version": "2012-10-17",
          "Statement": [
            { "Sid": "",
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "aws:SourceAccount": "{{ target_account.account_id }}"
                }
              }
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess


  ### Lambda function to ship CW Logs to whatever destination
  AwsLambdaEC2InstallCWAgent:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "ec2-install-cwagent.lambda_handler"
      Role: !GetAtt LambdaEC2InstallCWAgentRole.Arn
      Code:
        S3Bucket: "{{ lambda_function_bucket_name }}"
        S3Key: "{{ cw.ec2_install_cwagent_lambda_s3_key }}"
      Runtime: python3.12
      Timeout: 90
      Tags:
        - Key: Application
          Value: "{{ application | default('NA') }}"
        - Key: Environment
          Value: "{{ env  | default('NA') }}"
        - Key: Customer
          Value: "{{ customer | default('NA') }}"

  ### CW Event Rule to install and configure CWAgent on EC2 instances that transition to running state
  CWEventRuleSSMInstallCWAgent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Emit event whenever an EC2 transitions to the running state"
      EventPattern: '{"source": ["aws.ec2"], "detail-type": ["EC2 Instance State-change Notification"], "detail": {"state": ["running"]}}'
      Name: SSMInstallCWAgent
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt AwsLambdaEC2InstallCWAgent.Arn
          Id: AwsLambdaEC2InstallCWAgent

  AwsLambdaEC2InstallCWAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AwsLambdaEC2InstallCWAgent.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CWEventRuleSSMInstallCWAgent.Arn
{% endif %}

  ### CW Event Rules
{% for event_rule in cw.event_rules | default([]) %}
  CWEventRule{{ event_rule.name }}:
    Type: AWS::Events::Rule
    Properties:
      Description: "{{ event_rule.description | default('') }}"
      EventPattern: '{{ event_rule.pattern | to_json }}'
      Name: "{{ event_rule.name }}"
      State: "ENABLED"
{%   if event_rule.targets is defined %}
      Targets:
{%     for target in event_rule.targets %}
{%       if target.type == 'import' %}
          - Arn: !ImportValue {{ target.value }}
            Id: "{{ target.value }}"
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}

  ### CW Scheduled Rules
{% for event_schedule in cw.scheduled_rules | default([]) %}
  CWEventSchedule{{ event_schedule.name }}:
    Type: AWS::Events::Rule
    Properties:
      Description: "{{ event_schedule.description | default('') }}"
      ScheduleExpression: "{{ event_schedule.schedule_expression }}"
      Name: "{{ event_schedule.name }}"
      State: "ENABLED"
{%   if event_schedule.targets is defined %}
      Targets:
{%     for target in event_schedule.targets %}
{%       if target.type == 'import' %}
        - Arn: !ImportValue {{ target.value }}
          Id: "{{ target.value }}"
{%       endif %}
{%     endfor %}
{%   endif %}
{% endfor %}

### TODO: Add a property to identify the target service (i.e. Lambda, ...)
### TODO: Also create the AWS::Lambda::Permission if the target is a Lambda function

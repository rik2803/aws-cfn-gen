---
### TODO: SNS Subscriptions and subscription filters

AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create one or more SNS Topics (aws-cfn-gen version: {{ gittag | default('na') }})

Resources:
{% for topic in sns %}
{%   set sns_cfn_name = topic.display_name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}
  SNS{{ sns_cfn_name }}:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "{{ topic.display_name }}"
      KmsMasterKeyId: alias/aws/sns
{%   if topic.topic_name is defined %}
      TopicName: "{{ topic.topic_name }}"
{%   endif %}

{%   for subscription in topic.subscriptions | default([]) %}
{%     set subscr_cfn_name = subscription.name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}
{%     if subscription.endpoint_export is defined %}
{%       set subscr_endpoint = "!ImportValue \"" + subscription.endpoint_export + "\"" %}
{%     elif subscription.endpoint_arn is defined %}
{%       set subscr_endpoint = subscription.endpoint_arn %}
{%     endif %}

  SNSSubscr{{ subscr_cfn_name }}:
    DependsOn:
      - SNS{{ sns_cfn_name }}
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: {{ subscr_endpoint }}
      Protocol: {{ subscription.protocol | default('lambda') }}
      TopicArn: !Ref SNS{{ sns_cfn_name }}
{%     if subscription.filter_policy is defined %}
      FilterPolicy: '{{ subscription.filter_policy }}'
{%     endif %}

{%     if subscription.protocol == 'lambda' %}
  LambdaInvokePermission{{ subscr_cfn_name }}:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNS{{ sns_cfn_name }}
      FunctionName: {{ subscr_endpoint }}
{%     endif %}
{%   endfor %}

{%   if topic.cross_account_policies is defined %}
  TopicPolicy{{ sns_cfn_name }}:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNS{{ sns_cfn_name }}
      PolicyDocument:
          Version: '2012-10-17'
          Id: __default_policy_ID
          Statement:
            - Sid: __default_statement_ID
              Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - SNS:GetTopicAttributes
                - SNS:SetTopicAttributes
                - SNS:AddPermission
                - SNS:RemovePermission
                - SNS:DeleteTopic
                - SNS:Subscribe
                - SNS:ListSubscriptionsByTopic
                - SNS:Publish
                - SNS:Receive
              Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:{{ topic.topic_name }}"
              Condition:
                StringEquals:
                  AWS:SourceOwner: !Sub "${AWS::AccountId}"
{%     for policy in topic.cross_account_policies %}
            - Sid: "{{ policy.principal }}"
              Effect: Allow
              Principal:
                AWS: "{{ policy.principal }}"
              Action: [ "{{ policy.actions | join('", "') }}" ]
              Resource: "{{ policy.resource }}"

{%     endfor %}
{%   endif %}

{% endfor %}

Outputs:
{% for topic in sns %}
{%   set sns_cfn_name = topic.display_name | replace('-', ' ') | replace('_', ' ') | replace('.', ' ') | title | replace(' ', '') %}
  SNS{{ sns_cfn_name }}Output:
    Value: !Ref SNS{{ sns_cfn_name }}
    Description: "SNS topic {{ sns_cfn_name }} resource logical name"
    Export:
      Name: !Sub "${AWS::StackName}-{{ sns_cfn_name }}"

{% endfor %}